<sect3 id="api.av.extend">
    <title><function>av_extend </function></title>
    <funcsynopsis>
      <funcprototype>
        <funcdef> <function>av_extend</function></funcdef>
        <paramdef>AV* <parameter>array</parameter></paramdef>
        <paramdef>IV <parameter>index</parameter></paramdef>
      </funcprototype>
    </funcsynopsis>
<para>
<!-- What does it do? -->
</para>
<example>
<title> Assigning to an array slice </title>
<para>

<!-- Introduction to example -->

When you assign to an array slice in Perl, there's a possibility that
you'll be assigning to elements that don't exist yet. For instance, in
this code:

<programlisting>
@array = (1,2,3,4);

@array[10, 30] = qw( hi there );
</programlisting>

we only have 4 elements in our array, and we're about to store to
elements 10 and 30. If we merely used <function>av_store</function>,
Perl would have to extend the array twice: once to accomodate element
10, and once to accomodate element 30. Instead, Perl looks over the
slice, finds the maximum element it's going to assign to, (in this
case, 30) and calls <function>av_extend</function> to pre-extend the
array. (<filename>pp.c:3339</filename>)
</para>
        <programlistingco>
          <areaspec>
		  <area coords="2" id="api.av.extend.1">
		  <area coords="3" id="api.av.extend.2">
		  <area coords="7" id="api.av.extend.3">
		</areaspec>
          <programlisting>
     I32 max = -1;
     for (svp = MARK + 1; svp <= SP; svp++) {
          elem = SvIVx(*svp);
          if (elem > max)
              max = elem;
     }
     if (max > AvMAX(av))
         av_extend(av, max);
</programlisting>
          <calloutlist>
        <callout arearefs="api.av.extend.1">
          <para>
Perl ensures that the elements of our slice (10 and 30) are placed on
a stack, starting from <varname>MARK + 1</varname> and ending at
<varname>SP</varname>. We look at each of these elements in turn.
        </para>
        </callout>

        <callout arearefs="api.av.extend.2">
          <para>
These elements are pointers to <type>SV*</type>s, and to find the
numerical value, we dereference the pointer and call
<function>SvIVx</function> on the <type>SV</type> to examine its
<type>IV</type>. We compare each one against our stored maximum and,
if necessary, update the maximum value.
        </para>
        </callout>

	<callout arearefs="api.av.extend.3">
          <para>
Now we know the highest element we'll be assigning to, we check to see
whether this is higher than the current size of the array. If so, we
need to call <function>av_extend</function> to increase the array's size.
        </para>
        </callout>

          </calloutlist>
        </programlistingco>
      </example>


      </sect3>